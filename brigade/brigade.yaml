apiVersion: v1
kind: Template
parameters:
  - name: GITHUB_APP_KEY
  - name: GITHUB_APP_ID
objects:
- apiVersion: v1
  data:
    key.pem: "${GITHUB_APP_KEY}"
  kind: ConfigMap
  metadata:
    labels:
      app: brigade-brigade-github-app
      chart: brigade-github-app-0.1.2
      heritage: Tiller
      release: brigade
      role: gateway
      type: kubernetes-events
    name: brigade-brigade-github-app
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: brigade-brigade-github-app
      chart: brigade-github-app-0.1.2
      heritage: Tiller
      release: brigade
      role: gateway
      type: github-app
    name: brigade-brigade-github-app
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: brigade-brigade-github-app
          release: brigade
          role: gateway
          type: github-app
      spec:
        containers:
        - env:
          - name: BRIGADE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: BRIGADE_AUTHORS
            value: OWNER,MEMBER,COLLABORATOR
          - name: GATEWAY_CONFIG
            value: /etc/brigade-github-app/key.pem
          - name: APP_ID
            value: ${GITHUB_APP_ID}
          - name: CHECK_SUITE_ON_PR
            value: "true"
          image: brigadecore/brigade-github-app:latest
          imagePullPolicy: Always
          name: brigade-github-app
          volumeMounts:
          - mountPath: /etc/brigade-github-app
            name: github-config
        serviceAccountName: brigade-brigade-github-app
        volumes:
        - configMap:
            name: brigade-brigade-github-app
          name: github-config
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app: brigade-brigade-github-app
      chart: brigade-github-app-0.1.2
      heritage: Tiller
      release: brigade
    name: brigade-brigade-github-app
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app: brigade-brigade-github-app
      chart: brigade-github-app-0.1.2
      heritage: Tiller
      release: brigade
    name: brigade-brigade-github-app
  rules:
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - list
    - watch
    - get
    - create
  - apiGroups:
    - ""
    resources:
    - 'pods'
    verbs:
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app: brigade-brigade-github-app
      chart: brigade-github-app-0.1.2
      heritage: Tiller
      release: brigade
    name: brigade-brigade-github-app
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: brigade-brigade-github-app
  subjects:
  - kind: ServiceAccount
    name: brigade-brigade-github-app
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: brigade-brigade-github-app
      chart: brigade-github-app-0.1.2
      heritage: Tiller
      release: brigade
    name: brigade-brigade-github-app
  spec:
    ports:
    - name: brigade-github-app
      port: 80
      protocol: TCP
      targetPort: 7746
    selector:
      app: brigade-brigade-github-app
      type: github-app
    type: ClusterIP
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: kashti
      chart: kashti-0.1.1
      heritage: Tiller
      release: brigade
    name: brigade-kashti
  spec:
    replicas: 1
    template:
      metadata:
        annotations:
          checksum/config-js: 9cde6c482cde51f90bedd39f3e0ff4c2b2efb8bb4b9371d40d524d43e9177c75
          checksum/config-nginx: bbee88e5bed89e1b1e9a49db9acae7fe7feeeb4dfe59b9690bd7e54287dcd6b9
        labels:
          app: kashti
          release: brigade
      spec:
        containers:
        - image: brigadecore/kashti:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 8080
          name: kashti
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
          resources: {}
          volumeMounts:
          - mountPath: /usr/share/nginx/html/assets/js/settings
            name: config-js
          - mountPath: /etc/nginx/conf.d
            name: config-nginx
          - mountPath: /var/run
            name: nginx-cache
          - mountPath: /var/cache/nginx
            name: nginx-cache
        volumes:
        - configMap:
            name: brigade-kashti-js
          name: config-js
        - configMap:
            name: brigade-kashti-nginx
          name: config-nginx
        - emptyDir: {}
          name: nginx-cache
- apiVersion: v1
  data:
    settings.js: |-
      var brigadeApiURL = '//' + location.host; 'http://brigade-brigade-api:7745';
      // End
  kind: ConfigMap
  metadata:
    labels:
      chart: kashti-0.1.1
      heritage: Tiller
      release: brigade
    name: brigade-kashti-js
- apiVersion: v1
  data:
    default.conf: "server {\n    listen       8080;\n    server_name  localhost;\n\n
      \   # Proxy to API server\n    location /v1/ {\n        proxy_pass http://brigade-brigade-api:7745/v1/;\n
      \   }\n\n    location / {\n        root   /usr/share/nginx/html;\n        index
      \ index.html index.htm;\n        try_files $uri $uri/ /index.html;\n    }\n
      \   \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html
      {\n        root   /usr/share/nginx/html;\n    }\n}"
  kind: ConfigMap
  metadata:
    labels:
      chart: kashti-0.1.1
      heritage: Tiller
      release: brigade
    name: brigade-kashti-nginx
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: kashti
      chart: kashti-0.1.1
      heritage: Tiller
      release: brigade
    name: brigade-kashti
  spec:
    ports:
    - name: kashti
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: kashti
      release: brigade
    type: ClusterIP
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade-api
      helm.sh/chart: brigade-1.0.0
      role: api
    name: brigade-brigade-api
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: brigade-brigade-api
          app.kubernetes.io/name: brigade-brigade-api
          role: api
      spec:
        containers:
        - env:
          - name: BRIGADE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: BRIGADE_API_PORT
            value: "7745"
          image: brigadecore/brigade-api:v1.0.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 7745
          name: brigade
          ports:
          - containerPort: 7745
          readinessProbe:
            httpGet:
              path: /healthz
              port: 7745
        serviceAccountName: brigade-brigade-api
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-api
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-api
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - secrets
    - pods/log
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-api
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: brigade-brigade-api
  subjects:
  - kind: ServiceAccount
    name: brigade-brigade-api
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      helm.sh/chart: brigade-1.0.0
      role: api
    name: brigade-brigade-api
  spec:
    ports:
    - name: brigade-api
      port: 7745
      protocol: TCP
      targetPort: 7745
    selector:
      app.kubernetes.io/name: brigade-brigade-api
    type: ClusterIP
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade-ctrl
      helm.sh/chart: brigade-1.0.0
      role: controller
    name: brigade-brigade-ctrl
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: brigade-brigade-ctrl
          app.kubernetes.io/name: brigade-brigade-ctrl
          role: controller
      spec:
        containers:
        - command:
          - /usr/bin/brigade-controller
          env:
          - name: BRIGADE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: BRIGADE_WORKER_IMAGE
            value: brigadecore/brigade-worker:v1.0.0
          - name: BRIGADE_WORKER_PULL_POLICY
            value: IfNotPresent
          - name: BRIGADE_WORKER_SERVICE_ACCOUNT
            value: brigade-worker
          image: brigadecore/brigade-controller:v1.0.0
          imagePullPolicy: IfNotPresent
          name: brigade
        serviceAccountName: brigade-brigade-ctrl
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-ctrl
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-ctrl
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - secrets
    - configmaps
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-ctrl
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: brigade-brigade-ctrl
  subjects:
  - kind: ServiceAccount
    name: brigade-brigade-ctrl
- apiVersion: batch/v1beta1
  kind: CronJob
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
      role: vacuum
    name: brigade-brigade-vacuum
  spec:
    failedJobsHistoryLimit: 10
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app.kubernetes.io/name: brigade-brigade
              role: vacuum
          spec:
            containers:
            - env:
              - name: VACUUM_AGE
                value: 720h
              - name: VACUUM_MAX_BUILDS
                value: "-1"
              - name: VACUUM_SKIP_RUNNING_BUILDS
                value: "false"
              - name: BRIGADE_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              image: brigadecore/brigade-vacuum:v1.0.0
              imagePullPolicy: IfNotPresent
              name: brigade-vacuum
            restartPolicy: OnFailure
            serviceAccountName: brigade-vacuum
    schedule: '@hourly'
    successfulJobsHistoryLimit: 10
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-vacuum
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-vacuum
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - secrets
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - watch
    - delete
  - apiGroups:
    - ""
    resources:
    - pods/log
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-vacuum
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: brigade-brigade-vacuum
  subjects:
  - kind: ServiceAccount
    name: brigade-vacuum
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-worker
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-wrk
  rules:
  - apiGroups:
    - ""
    resources:
    - pods
    - secrets
    - persistentvolumeclaims
    - configmaps
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - apiGroups:
    - ""
    resources:
    - pods/log
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/instance: brigade
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: brigade-brigade
      helm.sh/chart: brigade-1.0.0
    name: brigade-brigade-wrk
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: brigade-brigade-wrk
  subjects:
  - kind: ServiceAccount
    name: brigade-worker
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      app: brigade
      chart: kashti-0.1.1
      heritage: Tiller
      release: brigade
    name: brigade-kashti
  spec:
    host: ""
    port:
      targetPort: kashti
    tls:
      termination: edge
    to:
      kind: ""
      name: brigade-kashti
      weight: null
  status:
    ingress: null