apiVersion: v1
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels: {}
    name: ${NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: registry.hub.docker.com/library/sonarqube:7.6-community
      from:
        kind: DockerImage
        name: registry.hub.docker.com/library/sonarqube:7.6-community
      generation: null
      importPolicy: {}
      name: 7.6-community
      referencePolicy:
        type: "Local"
  status:
    dockerImageRepository: ""
- apiVersion: v1
  data:
    sonar.properties: |
      sonar.ce.javaOpts=-Xmx1024m -Xms512m -XX:+HeapDumpOnOutOfMemoryError
      sonar.web.host=0.0.0.0
      sonar.web.port=9000
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: ${NAME}
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels: {}
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${NAME}
    strategy:
      resources: {}
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          deploymentconfig: ${NAME}
      spec:
        initContainers:
          - name: init
            image: " "
            command:
              - "bash"
              - "-c"
              - cp /opt/sonarqube/extensions/plugins/*.jar /plugins/ && 
                curl -sL -o /plugins/sonar-gherkin-plugin-1.7.jar https://github.com/racodond/sonar-gherkin-plugin/releases/download/1.7/sonar-gherkin-plugin-1.7.jar
            volumeMounts:
              - mountPath: /opt/sonarqube/temp
                name: tmp
              - mountPath: /plugins
                name: plugins
        containers:
        - name: sonarqube
          ports:
          - containerPort: 9000
            protocol: TCP
          resources:
            limits:
              cpu: '1'
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - mountPath: /opt/sonarqube/data
              name: data
            - mountPath: /opt/sonarqube/temp
              name: tmp
            - mountPath: /opt/sonarqube/logs
              name: logs
            - mountPath: /opt/sonarqube/conf/
              name: config
            - mountPath: /opt/sonarqube/extensions/downloads
              name: tmp
            #- mountPath: /opt/sonarqube/extensions/plugins/tmp
            - mountPath: /opt/sonarqube/extensions/plugins
              name: plugins
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir: {}
          name: logs
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: plugins
        - emptyDir: {}
          name: secret
        - configMap:
            defaultMode: 420
            name: sonarqube
          name: config
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - sonarqube
        - init
        from:
          kind: ImageStreamTag
          name: ${NAME}:7.6-community
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations: {}
    creationTimestamp: null
    labels: {}
    name: ${NAME}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      deploymentconfig: ${NAME}
  status:
    loadBalancer: {}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    creationTimestamp: null
    name: ${NAME}
  spec:
    host: ""
    port:
      targetPort: 9000-tcp
    tls:
      termination: edge
    to:
      kind: "Service"
      name: ${NAME}
      weight: null
  status:
    ingress: null
kind: Template
metadata: {}
parameters:
  - name: NAME
    value: sonarqube
